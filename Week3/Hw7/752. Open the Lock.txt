class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        unordered_set<string> dead(deadends.begin(), deadends.end());
        if (dead.count("0000")) return -1;

        queue<string> q;
        unordered_set<string> visited;
        q.push("0000");
        visited.insert("0000");

        int steps = 0;

        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                string cur = q.front(); q.pop();
                if (cur == target) return steps;

                for (int i = 0; i < 4; ++i) {
                    string up = cur;
                    up[i] = (cur[i] == '9') ? '0' : cur[i] + 1;

                    string down = cur;
                    down[i] = (cur[i] == '0') ? '9' : cur[i] - 1;

                    if (!dead.count(up) && !visited.count(up)) {
                        q.push(up);
                        visited.insert(up);
                    }
                    if (!dead.count(down) && !visited.count(down)) {
                        q.push(down);
                        visited.insert(down);
                    }
                }
            }
            steps++;
        }
        return -1;
    }
};

